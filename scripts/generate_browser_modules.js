#!/usr/bin/env node
/**
 * Generate browser modules that statically import JSON assets
 * - dist/browser-alphabets.mjs: map of lang-script -> alphabet JSON
 * - dist/browser-layouts.mjs: map of layoutId -> keyboard layout JSON + AVAILABLE_LAYOUTS
 */

const fs = require('fs');
const fsp = fs.promises;
const path = require('path');

const ROOT = path.join(__dirname, '..');
const DATA_DIR = path.join(ROOT, 'data');
const ALPHABETS_DIR = path.join(DATA_DIR, 'alphabets');
const LAYOUTS_DIR = path.join(DATA_DIR, 'layouts');
const DIST_DIR = path.join(ROOT, 'dist');

function toVarName(name) {
  // make a safe JS identifier
  return name.replace(/[^a-zA-Z0-9_$]/g, '_').replace(/^\d/, '_$&');
}

async function ensureDir(dir) {
  await fsp.mkdir(dir, { recursive: true });
}

async function generateAlphabetsModule() {
  const files = (await fsp.readdir(ALPHABETS_DIR)).filter(f => f.endsWith('.json'));
  files.sort();

  const imports = [];
  const entries = [];

  for (const file of files) {
    const base = file.replace(/\.json$/, ''); // e.g., en-Latn
    const varName = toVarName(base);
    imports.push(`import ${varName} from '../data/alphabets/${file}' with { type: 'json' };`);
    entries.push(`  '${base}': ${varName}`);
  }

  const out = `// AUTO-GENERATED by scripts/generate_browser_modules.js. Do not edit.
${imports.join('\n')}

export const ALPHABETS = {
${entries.join(',\n')}
};
`;

  const outPath = path.join(DIST_DIR, 'browser-alphabets.mjs');
  await fsp.writeFile(outPath, out);
  console.log(`✅ Wrote ${outPath} with ${files.length} alphabets`);
}

async function generateLayoutsModule() {
  let files = (await fsp.readdir(LAYOUTS_DIR)).filter(f => f.endsWith('.json'));
  // Exclude the index.json list file from imports
  files = files.filter(f => f !== 'index.json');
  files.sort();

  const imports = [];
  const entries = [];

  for (const file of files) {
    const base = file.replace(/\.json$/, ''); // e.g., en-us
    const varName = toVarName(base);
    imports.push(`import ${varName} from '../data/layouts/${file}' with { type: 'json' };`);
    entries.push(`  '${base}': ${varName}`);
  }

  const out = `// AUTO-GENERATED by scripts/generate_browser_modules.js. Do not edit.
${imports.join('\n')}

export const LAYOUTS = {
${entries.join(',\n')}
};

export const AVAILABLE_LAYOUTS = Object.keys(LAYOUTS);
`;

  const outPath = path.join(DIST_DIR, 'browser-layouts.mjs');
  await fsp.writeFile(outPath, out);
  console.log(`✅ Wrote ${outPath} with ${files.length} layouts`);
}

async function main() {
  await ensureDir(DIST_DIR);
  await generateAlphabetsModule();
  await generateLayoutsModule();
}

if (require.main === module) {
  main().catch((err) => {
    console.error('❌ Failed to generate browser modules', err);
    process.exit(1);
  });
}

