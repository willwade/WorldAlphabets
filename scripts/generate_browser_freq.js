#!/usr/bin/env node
/**
 * Generate browser frequency ranks module
 * - Reads data/freq/top1000/*.txt
 * - Emits dist/browser-freq.mjs exporting FREQ_RANKS mapping
 *   { [lang]: { mode: 'word'|'bigram', tokens: string[] } }
 */

const fs = require('fs');
const fsp = fs.promises;
const path = require('path');

const ROOT = path.join(__dirname, '..');
const FREQ_DIR = path.join(ROOT, 'data', 'freq', 'top1000');
const DIST_DIR = path.join(ROOT, 'dist');

async function ensureDir(dir) {
  await fsp.mkdir(dir, { recursive: true });
}

function escapeToken(str) {
  // Escape backslashes and backticks inside template literals isn't needed
  // because we'll use JSON.stringify for safety.
  return str;
}

async function generate() {
  const files = (await fsp.readdir(FREQ_DIR)).filter(f => f.endsWith('.txt'));
  files.sort();

  const outLines = [];
  outLines.push('// AUTO-GENERATED by scripts/generate_browser_freq.js. Do not edit.');
  outLines.push('export const FREQ_RANKS = {');

  for (const file of files) {
    const lang = file.replace(/\.txt$/, '');
    const full = path.join(FREQ_DIR, file);
    const content = await fsp.readFile(full, 'utf8');
    const lines = content.split(/\r?\n/).filter(Boolean);

    let mode = 'word';
    const tokens = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (i === 0 && line.startsWith('#')) {
        if (line.includes('bigram')) mode = 'bigram';
        continue; // skip header
      }
      tokens.push(escapeToken(line));
    }

    outLines.push(`  '${lang}': { mode: '${mode}', tokens: ${JSON.stringify(tokens)} },`);
  }

  outLines.push('};');

  await ensureDir(DIST_DIR);
  const outPath = path.join(DIST_DIR, 'browser-freq.mjs');
  await fsp.writeFile(outPath, outLines.join('\n'));
  console.log(`\u2705 Wrote ${outPath} with ${files.length} languages`);
}

if (require.main === module) {
  generate().catch((err) => {
    console.error('\u274c Failed to generate browser freq module', err);
    process.exit(1);
  });
}

